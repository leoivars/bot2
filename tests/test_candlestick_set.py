import unittest
import paths_for_tests
from app.market_reader.candlestick import Candlestick
from app.market_reader.clandlestick_list_constants import *
from app.market_reader.candlestick_set import Candlestick_Set
import time

class Test_Candlestick_Set(unittest.TestCase):
        
    def test_creation(self):
        candlestick_list = [[1670299200000, '17003.84000000', '17023.41000000', '16955.13000000', '17001.17000000', '27028.21636000', 1670313599999, '459394516.64545470', 559525, '13273.58246000', '225615357.19813410', '0'], [1670313600000, '17001.17000000', '17041.96000000', '16906.37000000', '16983.90000000', '37036.12495000', 1670327999999, '629096324.31967460', 786549, '18216.08824000', '309431126.45219650', '0'], [1670328000000, '16983.42000000', '17032.95000000', '16930.00000000', '16985.27000000', '49226.80508000', 1670342399999, '836457658.83823420', 937032, '24250.78765000', '412088961.04435070', '0'], [1670342400000, '16985.27000000', '17021.56000000', '16912.24000000', '16970.93000000', '40500.76253000', 1670356799999, '687281593.39491260', 807475, '19894.80890000', '337615928.21450410', '0'], [1670356800000, '16970.52000000', '17107.01000000', '16951.75000000', '17088.96000000', '31058.76430000', 1670371199999, '528464544.71736770', 657470, '16065.00318000', '273352872.08692350', '0'], [1670371200000, '17088.96000000', '17142.21000000', '17018.94000000', '17025.03000000', '32672.43476000', 1670385599999, '557348716.63178470', 657136, '16172.40188000', '275896445.39956640', '0'], [1670385600000, '17024.97000000', '17046.48000000', '16729.35000000', '16763.03000000', '48730.74334000', 1670399999999, '823875288.85619030', 876082, '23146.26606000', '391307607.47413080', '0'], [1670400000000, '16763.03000000', '16836.69000000', '16678.83000000', '16793.29000000', '40654.46263000', 1670414399999, '682895946.10573440', 796524, '19730.59539000', '331425474.36175500', '0'], [1670414400000, '16793.29000000', '16897.38000000', '16765.12000000', '16837.48000000', '45582.55807000', 1670428799999, '767366071.60828750', 930408, '22383.82806000', '376829630.24527310', '0'], [1670428800000, '16837.48000000', '16850.24000000', '16778.21000000', '16815.73000000', '31381.52031000', 1670443199999, '527548823.92160700', 604324, '15388.24642000', '258692427.71584620', '0'], [1670443200000, '16815.13000000', '16865.81000000', '16793.70000000', '16836.64000000', '21635.69423000', 1670457599999, '364171947.18186300', 420515, '10981.71417000', '184850791.29629710', '0'], [1670457600000, '16836.64000000', '16890.01000000', '16780.01000000', '16834.32000000', '36098.63764000', 1670471999999, '607765057.47174560', 632935, '17543.87834000', '295379924.59905160', '0'], [1670472000000, '16834.32000000', '16851.00000000', '16777.00000000', '16825.55000000', '29113.62581000', 1670486399999, '489623338.03713720', 555647, '14594.52206000', '245455420.42447850', '0'], [1670486400000, '16825.55000000', '16863.01000000', '16733.49000000', '16851.02000000', '31992.18247000', 1670500799999, '538030802.15952860', 655245, '15747.89278000', '264848419.11325190', '0'], [1670500800000, '16850.88000000', '16957.79000000', '16802.88000000', '16917.40000000', '45153.97555000', 1670515199999, '761741289.30460750', 926477, '22453.11435000', '378795233.66407520', '0'], [1670515200000, '16917.39000000', '17299.00000000', '16909.46000000', '17251.62000000', '57256.46966000', 1670529599999, '978606099.67510350', 1055856, '28817.48642000', '492581904.70643190', '0'], [1670529600000, '17251.32000000', '17297.65000000', '17154.94000000', '17224.10000000', '36803.08691000', 1670543999999, '633660938.38228920', 694122, '18081.86299000', '311316218.91006160', '0'], [1670544000000, '17224.10000000', '17300.00000000', '17186.50000000', '17202.66000000', '37666.59527000', 1670558399999, '648923904.44061860', 752600, '19013.10408000', '327564120.93593070', '0'], [1670558400000, '17202.01000000', '17235.85000000', '17188.00000000', '17211.93000000', '30283.86513000', 1670572799999, '521254437.28675620', 597993, '14857.57933000', '255737640.11493690', '0'], [1670572800000, '17211.65000000', '17269.39000000', '17200.00000000', '17248.14000000', '34177.71585000', 1670587199999, '588640724.13707400', 668958, '17123.52313000', '294924831.22613710', '0']]
        cs = Candlestick_Set(candlestick_list,5)      # Candlestick_set
        self.assertIsNone(cs.inconsistency_check())   # Test if data is consistent
        self.assertEqual(len(cs.df), 5)            # Test if dataframe has  5 values

    def test_inconsitency(self):
        candlestick_list = [[1670299200000, '17003.84000000', '17023.41000000', '16955.13000000', '17001.17000000', '27028.21636000', 9, '459394516.64545470', 559525, '13273.58246000', '225615357.19813410', '0'], [1670313600000, '17001.17000000', '17041.96000000', '16906.37000000', '16983.90000000', '37036.12495000', 1670327999999, '629096324.31967460', 786549, '18216.08824000', '309431126.45219650', '0'], [1670328000000, '16983.42000000', '17032.95000000', '16930.00000000', '16985.27000000', '49226.80508000', 1670342399999, '836457658.83823420', 937032, '24250.78765000', '412088961.04435070', '0'], [1670342400000, '16985.27000000', '17021.56000000', '16912.24000000', '16970.93000000', '40500.76253000', 1670356799999, '687281593.39491260', 807475, '19894.80890000', '337615928.21450410', '0'], [1670356800000, '16970.52000000', '17107.01000000', '16951.75000000', '17088.96000000', '31058.76430000', 1670371199999, '528464544.71736770', 657470, '16065.00318000', '273352872.08692350', '0'], [1670371200000, '17088.96000000', '17142.21000000', '17018.94000000', '17025.03000000', '32672.43476000', 1670385599999, '557348716.63178470', 657136, '16172.40188000', '275896445.39956640', '0'], [1670385600000, '17024.97000000', '17046.48000000', '16729.35000000', '16763.03000000', '48730.74334000', 1670399999999, '823875288.85619030', 876082, '23146.26606000', '391307607.47413080', '0'], [1670400000000, '16763.03000000', '16836.69000000', '16678.83000000', '16793.29000000', '40654.46263000', 1670414399999, '682895946.10573440', 796524, '19730.59539000', '331425474.36175500', '0'], [1670414400000, '16793.29000000', '16897.38000000', '16765.12000000', '16837.48000000', '45582.55807000', 1670428799999, '767366071.60828750', 930408, '22383.82806000', '376829630.24527310', '0'], [1670428800000, '16837.48000000', '16850.24000000', '16778.21000000', '16815.73000000', '31381.52031000', 1670443199999, '527548823.92160700', 604324, '15388.24642000', '258692427.71584620', '0'], [1670443200000, '16815.13000000', '16865.81000000', '16793.70000000', '16836.64000000', '21635.69423000', 1670457599999, '364171947.18186300', 420515, '10981.71417000', '184850791.29629710', '0'], [1670457600000, '16836.64000000', '16890.01000000', '16780.01000000', '16834.32000000', '36098.63764000', 1670471999999, '607765057.47174560', 632935, '17543.87834000', '295379924.59905160', '0'], [1670472000000, '16834.32000000', '16851.00000000', '16777.00000000', '16825.55000000', '29113.62581000', 1670486399999, '489623338.03713720', 555647, '14594.52206000', '245455420.42447850', '0'], [1670486400000, '16825.55000000', '16863.01000000', '16733.49000000', '16851.02000000', '31992.18247000', 1670500799999, '538030802.15952860', 655245, '15747.89278000', '264848419.11325190', '0'], [1670500800000, '16850.88000000', '16957.79000000', '16802.88000000', '16917.40000000', '45153.97555000', 1670515199999, '761741289.30460750', 926477, '22453.11435000', '378795233.66407520', '0'], [1670515200000, '16917.39000000', '17299.00000000', '16909.46000000', '17251.62000000', '57256.46966000', 1670529599999, '978606099.67510350', 1055856, '28817.48642000', '492581904.70643190', '0'], [1670529600000, '17251.32000000', '17297.65000000', '17154.94000000', '17224.10000000', '36803.08691000', 1670543999999, '633660938.38228920', 694122, '18081.86299000', '311316218.91006160', '0'], [1670544000000, '17224.10000000', '17300.00000000', '17186.50000000', '17202.66000000', '37666.59527000', 1670558399999, '648923904.44061860', 752600, '19013.10408000', '327564120.93593070', '0'], [1670558400000, '17202.01000000', '17235.85000000', '17188.00000000', '17211.93000000', '30283.86513000', 1670572799999, '521254437.28675620', 597993, '14857.57933000', '255737640.11493690', '0'], [1670572800000, '17211.65000000', '17269.39000000', '17200.00000000', '17248.14000000', '34177.71585000', 1670587199999, '588640724.13707400', 668958, '17123.52313000', '294924831.22613710', '0']]
        cs = Candlestick_Set(candlestick_list,len(candlestick_list))
        self.assertIsInstance(cs.inconsistency_check(),int)

    def test_set_update_time_to_actual_time(self):
        cs = Candlestick_Set(None,1)
        time_before=time.time()
        time.sleep(0.01)
        cs.set_update_time_to_actual_time()
        time.sleep(0.01)
        time_after=time.time()
        self.assertTrue( time_before < cs.update_time <time_after   )

    def test_update_from_candlestick_list(self):
        list1 = [[1670299200000, '17003.84000000', '17023.41000000', '16955.13000000', '17001.17000000', '27028.21636000', 1670313599999, '459394516.64545470', 559525, '13273.58246000', '225615357.19813410', '0'], [1670313600000, '17001.17000000', '17041.96000000', '16906.37000000', '16983.90000000', '37036.12495000', 1670327999999, '629096324.31967460', 786549, '18216.08824000', '309431126.45219650', '0'], [1670328000000, '16983.42000000', '17032.95000000', '16930.00000000', '16985.27000000', '49226.80508000', 1670342399999, '836457658.83823420', 937032, '24250.78765000', '412088961.04435070', '0'], [1670342400000, '16985.27000000', '17021.56000000', '16912.24000000', '16970.93000000', '40500.76253000', 1670356799999, '687281593.39491260', 807475, '19894.80890000', '337615928.21450410', '0'], [1670356800000, '16970.52000000', '17107.01000000', '16951.75000000', '17088.96000000', '31058.76430000', 1670371199999, '528464544.71736770', 657470, '16065.00318000', '273352872.08692350', '0'], [1670371200000, '17088.96000000', '17142.21000000', '17018.94000000', '17025.03000000', '32672.43476000', 1670385599999, '557348716.63178470', 657136, '16172.40188000', '275896445.39956640', '0']]
        list2 = [[1670385600000, '17024.97000000', '17046.48000000', '16729.35000000', '16763.03000000', '48730.74334000', 1670399999999, '823875288.85619030', 876082, '23146.26606000', '391307607.47413080', '0'], [1670400000000, '16763.03000000', '16836.69000000', '16678.83000000', '16793.29000000', '40654.46263000', 1670414399999, '682895946.10573440', 796524, '19730.59539000', '331425474.36175500', '0'], [1670414400000, '16793.29000000', '16897.38000000', '16765.12000000', '16837.48000000', '45582.55807000', 1670428799999, '767366071.60828750', 930408, '22383.82806000', '376829630.24527310', '0'], [1670428800000, '16837.48000000', '16850.24000000', '16778.21000000', '16815.73000000', '31381.52031000', 1670443199999, '527548823.92160700', 604324, '15388.24642000', '258692427.71584620', '0'], [1670443200000, '16815.13000000', '16865.81000000', '16793.70000000', '16836.64000000', '21635.69423000', 1670457599999, '364171947.18186300', 420515, '10981.71417000', '184850791.29629710', '0'], [1670457600000, '16836.64000000', '16890.01000000', '16780.01000000', '16834.32000000', '36098.63764000', 1670471999999, '607765057.47174560', 632935, '17543.87834000', '295379924.59905160', '0']]
        list3 = [[1670472000000, '16834.32000000', '16851.00000000', '16777.00000000', '16825.55000000', '29113.62581000', 1670486399999, '489623338.03713720', 555647, '14594.52206000', '245455420.42447850', '0'], [1670486400000, '16825.55000000', '16863.01000000', '16733.49000000', '16851.02000000', '31992.18247000', 1670500799999, '538030802.15952860', 655245, '15747.89278000', '264848419.11325190', '0'], [1670500800000, '16850.88000000', '16957.79000000', '16802.88000000', '16917.40000000', '45153.97555000', 1670515199999, '761741289.30460750', 926477, '22453.11435000', '378795233.66407520', '0'], [1670515200000, '16917.39000000', '17299.00000000', '16909.46000000', '17251.62000000', '57256.46966000', 1670529599999, '978606099.67510350', 1055856, '28817.48642000', '492581904.70643190', '0'], [1670529600000, '17251.32000000', '17297.65000000', '17154.94000000', '17224.10000000', '36803.08691000', 1670543999999, '633660938.38228920', 694122, '18081.86299000', '311316218.91006160', '0'], [1670544000000, '17224.10000000', '17300.00000000', '17186.50000000', '17202.66000000', '37666.59527000', 1670558399999, '648923904.44061860', 752600, '19013.10408000', '327564120.93593070', '0'], [1670558400000, '17202.01000000', '17235.85000000', '17188.00000000', '17211.93000000', '30283.86513000', 1670572799999, '521254437.28675620', 597993, '14857.57933000', '255737640.11493690', '0'], [1670572800000, '17211.65000000', '17269.39000000', '17200.00000000', '17248.14000000', '34177.71585000', 1670587199999, '588640724.13707400', 668958, '17123.52313000', '294924831.22613710', '0']]
        cs = Candlestick_Set(None,10)
        cs.update_from_candlestick_list(list1)
        self.assertIsNone(cs.inconsistency_check())
        cs.update_from_candlestick_list(list2)
        self.assertIsNone(cs.inconsistency_check())
        cs.update_from_candlestick_list(list3)
        self.assertIsNone(cs.inconsistency_check())

    def test_update(self):
        candlestick_list = [[1670299200000, '17003.84000000', '17023.41000000', '16955.13000000', '17001.17000000', '27028.21636000', 1670313599999, '459394516.64545470', 559525, '13273.58246000', '225615357.19813410', '0'], [1670313600000, '17001.17000000', '17041.96000000', '16906.37000000', '16983.90000000', '37036.12495000', 1670327999999, '629096324.31967460', 786549, '18216.08824000', '309431126.45219650', '0'], [1670328000000, '16983.42000000', '17032.95000000', '16930.00000000', '16985.27000000', '49226.80508000', 1670342399999, '836457658.83823420', 937032, '24250.78765000', '412088961.04435070', '0'], [1670342400000, '16985.27000000', '17021.56000000', '16912.24000000', '16970.93000000', '40500.76253000', 1670356799999, '687281593.39491260', 807475, '19894.80890000', '337615928.21450410', '0'], [1670356800000, '16970.52000000', '17107.01000000', '16951.75000000', '17088.96000000', '31058.76430000', 1670371199999, '528464544.71736770', 657470, '16065.00318000', '273352872.08692350', '0'], [1670371200000, '17088.96000000', '17142.21000000', '17018.94000000', '17025.03000000', '32672.43476000', 1670385599999, '557348716.63178470', 657136, '16172.40188000', '275896445.39956640', '0'], [1670385600000, '17024.97000000', '17046.48000000', '16729.35000000', '16763.03000000', '48730.74334000', 1670399999999, '823875288.85619030', 876082, '23146.26606000', '391307607.47413080', '0'], [1670400000000, '16763.03000000', '16836.69000000', '16678.83000000', '16793.29000000', '40654.46263000', 1670414399999, '682895946.10573440', 796524, '19730.59539000', '331425474.36175500', '0'], [1670414400000, '16793.29000000', '16897.38000000', '16765.12000000', '16837.48000000', '45582.55807000', 1670428799999, '767366071.60828750', 930408, '22383.82806000', '376829630.24527310', '0'], [1670428800000, '16837.48000000', '16850.24000000', '16778.21000000', '16815.73000000', '31381.52031000', 1670443199999, '527548823.92160700', 604324, '15388.24642000', '258692427.71584620', '0'], [1670443200000, '16815.13000000', '16865.81000000', '16793.70000000', '16836.64000000', '21635.69423000', 1670457599999, '364171947.18186300', 420515, '10981.71417000', '184850791.29629710', '0'], [1670457600000, '16836.64000000', '16890.01000000', '16780.01000000', '16834.32000000', '36098.63764000', 1670471999999, '607765057.47174560', 632935, '17543.87834000', '295379924.59905160', '0'], [1670472000000, '16834.32000000', '16851.00000000', '16777.00000000', '16825.55000000', '29113.62581000', 1670486399999, '489623338.03713720', 555647, '14594.52206000', '245455420.42447850', '0'], [1670486400000, '16825.55000000', '16863.01000000', '16733.49000000', '16851.02000000', '31992.18247000', 1670500799999, '538030802.15952860', 655245, '15747.89278000', '264848419.11325190', '0'], [1670500800000, '16850.88000000', '16957.79000000', '16802.88000000', '16917.40000000', '45153.97555000', 1670515199999, '761741289.30460750', 926477, '22453.11435000', '378795233.66407520', '0'], [1670515200000, '16917.39000000', '17299.00000000', '16909.46000000', '17251.62000000', '57256.46966000', 1670529599999, '978606099.67510350', 1055856, '28817.48642000', '492581904.70643190', '0'], [1670529600000, '17251.32000000', '17297.65000000', '17154.94000000', '17224.10000000', '36803.08691000', 1670543999999, '633660938.38228920', 694122, '18081.86299000', '311316218.91006160', '0'], [1670544000000, '17224.10000000', '17300.00000000', '17186.50000000', '17202.66000000', '37666.59527000', 1670558399999, '648923904.44061860', 752600, '19013.10408000', '327564120.93593070', '0'], [1670558400000, '17202.01000000', '17235.85000000', '17188.00000000', '17211.93000000', '30283.86513000', 1670572799999, '521254437.28675620', 597993, '14857.57933000', '255737640.11493690', '0'], [1670572800000, '17211.65000000', '17269.39000000', '17200.00000000', '17248.14000000', '34177.71585000', 1670587199999, '588640724.13707400', 668958, '17123.52313000', '294924831.22613710', '0']]
        cs = Candlestick_Set(None,10)
        for c in candlestick_list:
            cs.update(c[OPEN_TIME],c[OPEN],c[HIGH],c[LOW],c[CLOSE],c[VOLUME],c[CLOSE_TIME],1)
            self.assertIsNone(cs.inconsistency_check())

    def test_values_np(self):

        candlestick_list = [[1670299200000, '17003.84000000', '17023.41000000', '16955.13000000', '17001.17000000', '27028.21636000', 1670313599999, '459394516.64545470', 559525, '13273.58246000', '225615357.19813410', '0'],
                            [ 1670313600000, '17001.17000000', '17041.96000000', '16906.37000000', '16983.90000000', '37036.12495000', 1670327999999, '629096324.31967460', 786549, '18216.08824000', '309431126.45219650', '0'],
                            [1670328000000, '16983.42000000', '17032.95000000', '16930.00000000', '16985.27000000', '49226.80508000', 1670342399999, '836457658.83823420', 937032, '24250.78765000', '412088961.04435070', '0']]
        cs = Candlestick_Set(candlestick_list,len(candlestick_list))
        
        np = cs.values_np_open()
        for i in range(0,3):
            self.assertAlmostEqual(np[i],float( candlestick_list[i][OPEN] ))
        
        np = cs.values_np_high()
        for i in range(0,3):
            self.assertAlmostEqual(np[i],float( candlestick_list[i][HIGH] ))

        np = cs.values_np_low()
        for i in range(0,3):
            self.assertAlmostEqual(np[i],float( candlestick_list[i][LOW] ))

        np = cs.values_np_close()
        for i in range(0,3):
            self.assertAlmostEqual(np[i],float( candlestick_list[i][CLOSE] ))

        np = cs.values_np_volume()
        for i in range(0,3):
            self.assertAlmostEqual(np[i],float( candlestick_list[i][VOLUME] ))
    
    def test_panda_df(self):
        list1 = [[1670299200000, '17003.84000000', '17023.41000000', '16955.13000000', '17001.17000000', '27028.21636000', 1670313599999, '459394516.64545470', 559525, '13273.58246000', '225615357.19813410', '0'],
                 [1670313600000, '17001.17000000', '17041.96000000', '16906.37000000', '16983.90000000', '37036.12495000', 1670327999999, '629096324.31967460', 786549, '18216.08824000', '309431126.45219650', '0'],
                 [1670328000000, '16983.42000000', '17032.95000000', '16930.00000000', '16985.27000000', '49226.80508000', 1670342399999, '836457658.83823420', 937032, '24250.78765000', '412088961.04435070', '0'],
                 [1670342400000, '16985.27000000', '17021.56000000', '16912.24000000', '16970.93000000', '40500.76253000', 1670356799999, '687281593.39491260', 807475, '19894.80890000', '337615928.21450410', '0'],
                 [1670356800000, '16970.52000000', '17107.01000000', '16951.75000000', '17088.96000000', '31058.76430000', 1670371199999, '528464544.71736770', 657470, '16065.00318000', '273352872.08692350', '0'], 
                 [1670371200000, '17088.96000000', '17142.21000000', '17018.94000000', '17025.03000000', '32672.43476000', 1670385599999, '557348716.63178470', 657136, '16172.40188000', '275896445.39956640', '0']]
        cs = Candlestick_Set(list1,3)
        self.assertIsNone(cs.inconsistency_check())
        df = cs.panda_df(2)
        last_of_the_list = list1[-2:]
        for i in range(0,2):
            self.assertAlmostEqual(float( last_of_the_list[i][CLOSE] ) , df.iloc[i]['close'] )

    def test_last_candlestick(self):
        list =  [[1670299200000, '17003.84000000', '17023.41000000', '16955.13000000', '17001.17000000', '27028.21636000', 1670313599999, '459394516.64545470', 559525, '13273.58246000', '225615357.19813410', '0'],
                 [1670313600000, '17001.17000000', '17041.96000000', '16906.37000000', '16983.90000000', '37036.12495000', 1670327999999, '629096324.31967460', 786549, '18216.08824000', '309431126.45219650', '0'],
                 [1670328000000, '16983.42000000', '17032.95000000', '16930.00000000', '16985.27000000', '49226.80508000', 1670342399999, '836457658.83823420', 937032, '24250.78765000', '412088961.04435070', '0'] ]
                 
        cs = Candlestick_Set(list,3)
        last_candlestick = cs.last_candlestick()
        self.assertAlmostEqual( float( list[-1][OPEN] ) ,last_candlestick.open )

    def test_last_closed_candlestick(self):
        list =  [[1670299200000, '17003.84000000', '17023.41000000', '16955.13000000', '17001.17000000', '27028.21636000', 1670313599999, '459394516.64545470', 559525, '13273.58246000', '225615357.19813410', '0'],
                 [1670313600000, '17001.17000000', '17041.96000000', '16906.37000000', '16983.90000000', '37036.12495000', 1670327999999, '629096324.31967460', 786549, '18216.08824000', '309431126.45219650', '0']]
        cs = Candlestick_Set(None,10)
        for c in list:
            cs.update(c[OPEN_TIME],c[OPEN],c[HIGH],c[LOW],c[CLOSE],c[VOLUME],c[CLOSE_TIME],1)
        #last candlestick in not closed state
        c = [1670328000000, '16983.42000000', '17032.95000000', '16930.00000000', '16985.27000000', '49226.80508000', 1670342399999, '836457658.83823420', 937032, '24250.78765000', '412088961.04435070', '0']  
        cs.update(c[OPEN_TIME],c[OPEN],c[HIGH],c[LOW],c[CLOSE],c[VOLUME],c[CLOSE_TIME],0)
        self.assertIsNone(cs.inconsistency_check())
        last_cloused_candlestick = cs.last_closed_candlestick()
        self.assertAlmostEqual( float( list[-1][OPEN] ) ,last_cloused_candlestick.open )
    
    def test_get_candlestick_from_end(self):
        list1 = [[1670299200000, '17003.84000000', '17023.41000000', '16955.13000000', '17001.17000000', '27028.21636000', 1670313599999, '459394516.64545470', 559525, '13273.58246000', '225615357.19813410', '0'],
                 [1670313600000, '17001.17000000', '17041.96000000', '16906.37000000', '16983.90000000', '37036.12495000', 1670327999999, '629096324.31967460', 786549, '18216.08824000', '309431126.45219650', '0'],
                 [1670328000000, '16983.42000000', '17032.95000000', '16930.00000000', '16985.27000000', '49226.80508000', 1670342399999, '836457658.83823420', 937032, '24250.78765000', '412088961.04435070', '0'],
                 [1670342400000, '16985.27000000', '17021.56000000', '16912.24000000', '16970.93000000', '40500.76253000', 1670356799999, '687281593.39491260', 807475, '19894.80890000', '337615928.21450410', '0'],
                 [1670356800000, '16970.52000000', '17107.01000000', '16951.75000000', '17088.96000000', '31058.76430000', 1670371199999, '528464544.71736770', 657470, '16065.00318000', '273352872.08692350', '0'], 
                 [1670371200000, '17088.96000000', '17142.21000000', '17018.94000000', '17025.03000000', '32672.43476000', 1670385599999, '557348716.63178470', 657136, '16172.40188000', '275896445.39956640', '0']]
        cs = Candlestick_Set(list1,len(list1))
        self.assertIsNone(cs.inconsistency_check())
        for i in range (1,len(list1)+1):
            self.assertAlmostEqual( float(list1[-i][OPEN] ), cs.get_candlestick_from_end(i).open ) 
    
    def test_get_candlestick(self):
        list1 = [[1670299200000, '17003.84000000', '17023.41000000', '16955.13000000', '17001.17000000', '27028.21636000', 1670313599999, '459394516.64545470', 559525, '13273.58246000', '225615357.19813410', '0'],
                 [1670313600000, '17001.17000000', '17041.96000000', '16906.37000000', '16983.90000000', '37036.12495000', 1670327999999, '629096324.31967460', 786549, '18216.08824000', '309431126.45219650', '0'],
                 [1670328000000, '16983.42000000', '17032.95000000', '16930.00000000', '16985.27000000', '49226.80508000', 1670342399999, '836457658.83823420', 937032, '24250.78765000', '412088961.04435070', '0'],
                 [1670342400000, '16985.27000000', '17021.56000000', '16912.24000000', '16970.93000000', '40500.76253000', 1670356799999, '687281593.39491260', 807475, '19894.80890000', '337615928.21450410', '0'],
                 [1670356800000, '16970.52000000', '17107.01000000', '16951.75000000', '17088.96000000', '31058.76430000', 1670371199999, '528464544.71736770', 657470, '16065.00318000', '273352872.08692350', '0'], 
                 [1670371200000, '17088.96000000', '17142.21000000', '17018.94000000', '17025.03000000', '32672.43476000', 1670385599999, '557348716.63178470', 657136, '16172.40188000', '275896445.39956640', '0']]
        cs = Candlestick_Set(list1,len(list1))
        self.assertIsNone(cs.inconsistency_check())
        for i in range (0,len(list1)):
            self.assertAlmostEqual( float(list1[i][OPEN] ), cs.get_candlestick(i).open ) 


        




    





if __name__=='__main__':
    unittest.main()    
